{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","title","summary","poster","year","rating","genres","className","src","alt","map","index","class","slice","App","state","isLoading","movies","a","axios","get","response","data","this","setState","id","medium_cover_image","Date","getFullYear","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAiDeA,MAhCf,YAAkE,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACrD,OACE,sBAAKC,UAAU,QAAf,UAGE,qBAAKC,IAAKL,EAAQM,IAAKR,EAAOA,MAAOA,IACrC,sBAAKM,UAAU,cAAf,UAGE,oBAAIA,UAAU,eAAd,SAA8BN,IAC9B,qBAAIM,UAAU,cAAd,cAA8BH,EAA9B,OACA,oBAAIG,UAAU,gBAAd,SAGGD,EAAOI,KAAI,SAACJ,EAAQK,GACnB,OACE,oBAAgBJ,UAAU,sBAA1B,SACGD,GADMK,QAMf,qBAAIJ,UAAU,gBAAd,UACE,mBAAGK,MAAM,gBACG,IAAXP,EAAe,OAASA,EAF3B,aAIA,qBAAIE,UAAU,iBAAd,UAAgCL,EAAQW,MAAM,EAAG,KAAjD,gBC6DOC,G,8DA1Fb,aAAe,IAAD,8BAEZ,gBAGFC,MAAQ,CACNC,WAAW,EACXC,OAAQ,IAPI,E,4FAcd,8BAAAC,EAAA,sEAQyBC,IAAMC,IAzBrB,yEAiBV,OAQQC,EARR,OAacJ,EAERI,EAHFC,KACEA,KAAQL,OAKZM,KAAKC,SAAS,CAAEP,OAAQA,EAAQD,WAAW,IAlB7C,gD,0EAqBA,WAIE,MAA8BO,KAAKR,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAUnB,OACE,0BAASV,UAAU,YAAnB,WACiB,IAAdS,EAAsB,qEAA2B,uBAMjDA,EACC,sBAAKT,UAAU,cAAf,UACE,yBACA,yBACA,yBACA,iDAGF,qBAAKA,UAAU,SAAf,SAAyBU,EAAOP,KAtBtC,SAAkBO,GAGhB,OAAO,cAAC,EAAD,CAAuBQ,GAAIR,EAAOQ,GAAIxB,MAAOgB,EAAOhB,MAAOC,QAASe,EAAOf,QAASE,KAAMa,EAAOb,KAAMC,OAAQY,EAAOZ,OAAQF,OAAQc,EAAOS,mBAAoBpB,OAAQW,EAAOX,QAApKW,EAAOQ,UAqBT,IAAdT,EACC,yBAAQT,UAAU,SAAlB,UACE,sBAAKA,UAAU,0BAAf,UACE,qBAAKA,UAAU,eAAf,SACE,qBAAKC,IAAI,8EAA8EC,IAAI,YAE7F,qBAAKF,UAAU,eAAf,SACE,qBAAKC,IAAI,mEAAmEC,IAAI,SAElF,qBAAKF,UAAU,eAAf,SACE,qBAAKC,IAAI,oEAAoEC,IAAI,aAGrF,uBAAMF,UAAU,eAAhB,mBAAuC,IAAIoB,MAAOC,cAAlD,kCAGF,kC,GApFQC,IAAMC,YCCxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAWFC,SAASC,eAAe,W","file":"static/js/main.66247fa1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie\";\r\n\r\n// Movie컴포넌트가 받을 props에 대한 규칙을 설정해준다.\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string,\r\n  year: PropTypes.number.isRequired,\r\n  rating: PropTypes.number.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\n// 만약 state를 사용한다면 class 컴포넌트를 만들어야 하지만(나중에 react hook을 배우면 꼭 클래스 컴포넌트가 없어도 됨) state를 사용하지 않는다면 굳이 class 컴포넌트를 만들 필요는 없다.\r\n// 그냥 function 컴포넌트로 만들어주면 된다.\r\nfunction Movie({ title, summary, poster, year, rating, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      {/* App.js에서 보낸 데이터들을 받아서 JSX로 화면에 뿌려줌 */}\r\n      {/* <h1>Movie</h1> */}\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n        {/* 리액트에서 html안에서 자바스크립트를 쓰려면 {{}}로 묶어주고 안에 쓸 수 있다. (자주 쓰진 않지만 참고용으로 알아두기)  */}\r\n        {/* <h3 className=\"movie__title\" style={{ backgroundColor: \"red\" }}> */}\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h3 className=\"movie__year\">({year})</h3>\r\n        <ul className=\"movie__genres\">\r\n          {/* map에 있는 각각의 item은 key가 필요하다. 하지만 우리는 여기서 줄 키가 없다.  */}\r\n          {/* map()메서드는 첫 번쨰 인자외에 두 번째 인자로 argument를 준다. argument에는 숫자가 들어간다.  */}\r\n          {genres.map((genres, index) => {\r\n            return (\r\n              <li key={index} className=\"movie__genres__list\">\r\n                {genres}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        <h3 className=\"movie__rating\">\r\n          <i class=\"fas fa-star\"></i>\r\n          {rating === 0 ? \"None\" : rating} / 10.0\r\n        </h3>\r\n        <h3 className=\"movie__summary\">{summary.slice(0, 120)}...</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"./Movie\";\r\nimport \"./App.css\";\r\nimport \"./Movie.css\";\r\n\r\n// 영화 API 주소: https://yts.mx/api#movie_details\r\n// API를 가져올 주소를 설정해준다.\r\n// 주소 가장 맨 끝에 Endpoint Parameters를 추가해서 그 파라미터에 따른 Json데이터를 가져올 수 있다.\r\n// 예를들어 json뒤에 ?sort_by=rating를 썼는데 이것은 rating(평점) 순으로 정렬하려고 써준 것이다.\r\n// rating대신 year나 다른 것들을 쓰면 그 속성에 따른 정렬 방식으로 json데이터를 기져오는 것이다.\r\nconst URL = \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=genres\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    // console.log(\"constructor\");\r\n    super();\r\n  }\r\n\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n\r\n  // componentDidMount는 랜더가 끝난 후에 실행한다.\r\n  // componentDidMount안에 setTimeout을 이용해 일정 시간후에 state의 값을 바뀌도록 컨트롤 했다.\r\n  // 주의할 점은 setState()는 constructor()에서는 사용하면 에러가 난다.\r\n  // 왜냐하면 setState()는 마운트가 끝난 후(=컴포넌트가 생성된 후) 컨트롤이 가능하기 떄문이다.\r\n  async componentDidMount() {\r\n    // console.log(\"componentDidMount\");\r\n    // setTimeout(() => {\r\n    //   this.setState({isLoading: false})\r\n    // }, 2000);\r\n\r\n    // axios를 이용해 GET방식으로 URL변수를 가진 주소로 API를 요청한다.\r\n    // axios는 async await를 통해 동기 처리를 한 번 해줘야 한다.\r\n    const response = await axios.get(URL);\r\n\r\n    // axios에서 받은 정보를 데이터를 이용해서 movies배열을 가져왔다.\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = response;\r\n    // console.log(movies);\r\n\r\n    this.setState({ movies: movies, isLoading: false });\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"render\");\r\n\r\n    // this.state에서 isLoading과 movies를 뽑아온다.\r\n    const { isLoading, movies } = this.state;\r\n\r\n    // map()메서드를 돌릴 mapMovie함수를 생성함\r\n    // map()메서드를 이용해서 Movie컴포넌트에 데이터를 넘겨줌 (map()메서드를 쓸 때 return은 필수임r\n    function mapMovie(movies) {\r\n      // console.log(\"movies\", movies);\r\n      // return console.log(\"✅movies\", movies.title);\r\n      return <Movie key={movies.id} id={movies.id} title={movies.title} summary={movies.summary} year={movies.year} rating={movies.rating} poster={movies.medium_cover_image} genres={movies.genres} />;\r\n    }\r\n\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading === false ? <h1>🎬 Movie App 🎬</h1> : <h1></h1>}\r\n        {/* <h1>App</h1> */}\r\n        {/* {}안에는 자바스크립트를 쓸 수 있고 자바스크립트의 삼항연산자를 이용해 조건문을 만들어줬다.  */}\r\n        {/* isLoading이 true인지 false인지 검사해서 true면 \"Loading..\"을 false면 movies에 map()메서드를 돌린 결과를 가져온다. */}\r\n        {/* Loading 텍스트 대신에 아래와 같이 html태그들을 ()로 묶어서 사용할 수 있다.  */}\r\n        {/* <h2>{isLoading ? \"Loading...\" : \"We are ready\"}</h2> */}\r\n        {isLoading ? (\r\n          <div className=\"loading-bar\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n            <h2>Loading. . .</h2>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">{movies.map(mapMovie)}</div>\r\n        )}\r\n        {isLoading === false ? (\r\n          <footer className=\"footer\">\r\n            <div className=\"footer__icon__container\">\r\n              <div className=\"footer__icon\">\r\n                <img src=\"https://d1telmomo28umc.cloudfront.net/media/public/badges/react_nsNvyE0.png\" alt=\"react\"></img>\r\n              </div>\r\n              <div className=\"footer__icon\">\r\n                <img src=\"https://d1telmomo28umc.cloudfront.net/media/public/badges/js.png\" alt=\"js\"></img>\r\n              </div>\r\n              <div className=\"footer__icon\">\r\n                <img src=\"https://d1telmomo28umc.cloudfront.net/media/public/badges/es6.png\" alt=\"es6\"></img>\r\n              </div>\r\n            </div>\r\n            <span className=\"footer__text\">&copy; {new Date().getFullYear()} GW. All rights reserved.</span>\r\n          </footer>\r\n        ) : (\r\n          <footer></footer>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// \"npx create-react-app 폴더명\" 을 통해 리액트 프로젝트를 초기화하고 시작할 수 있다.\r\n// create-react-app을 하게 되면 자동으로 바벨설정부터 웹팩 등등 기본적으로 리액트를 사용할 수 있도록 세팅해준다.\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\"; // react-dom은 어플리케이션을 랜더할 때 필요한 모듈이다.\r\nimport App from \"./App\";\r\n// import Movie from \"./Movie\";\r\n// import App2 from \"./App2\"; // App2.js를 사용하기 위해 import해왔다.\r\n// import Coding from \"./Coding\";\r\n// import Food from \"./Food\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\n\r\n// react-dom은 render()메소드를 이용해서 index.html안에 있는 div#root안에 여기서 넣어줬던 컴포넌트들을 랜더해서 화면에 그려준다.\r\n// 리액트는 컴포넌트와 함께 동작하고, 모든 것들은 컴포넌트들이다.\r\n// 컴포넌트란 쉽게 말해 HTML를 return하는 함수이다. (이러한 자바스크립트+HTML 조합을 JSX라고 부른다.)\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    {/* <Movie /> */}\r\n    {/* <App2 /> */}\r\n    {/* 리액트가 랜더링을 할 때 Coding컴포넌트에 name=\"kimchi\" 형태로 데이터를 넘겨줄 수 있다. */}\r\n    {/* 이렇게 컴포넌트에게 넘겨주는 데이터들을 props라고 부른다.  */}\r\n    {/* 텍스트는 \"\"로 그냥 보내고(텍스트도 { \" \" }로 묶어서 보낼 수 있음) 나머지 자바스크립트쪽 변수들은 {}안에 묶어서 보낼 수 있다.  */}\r\n    {/* <Coding name=\"kimchi1\" name2={true} name3={[1, 2, 3, \"hello\", true]} /> */}\r\n    {/* <Coding name=\"kimchi2\" /> */}\r\n    {/* <Coding name=\"kimchi3\" /> */}\r\n    {/* <Food /> */}\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}