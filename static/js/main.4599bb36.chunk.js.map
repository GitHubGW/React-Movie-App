{"version":3,"sources":["components/Movie.js","components/Navigation.js","routes/Home.js","routes/About.js","routes/movieDetail.js","App.js","index.js"],"names":["Movie","id","title","summary","poster","year","rating","genres","to","pathname","state","className","src","alt","console","log","undefined","map","index","slice","Navigation","Home","isLoading","movies","a","axios","get","response","data","this","setState","medium_cover_image","Date","getFullYear","React","Component","About","props","movieDetail","location","history","push","App","path","exact","component","paht","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4599bb36.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Movie.css\";\r\n\r\n// Movie컴포넌트가 받을 props에 대한 규칙을 설정해준다.\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string,\r\n  year: PropTypes.number.isRequired,\r\n  rating: PropTypes.number.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\n// 만약 state를 사용한다면 class 컴포넌트를 만들어야 하지만(나중에 react hook을 배우면 꼭 클래스 컴포넌트가 없어도 됨) state를 사용하지 않는다면 굳이 class 컴포넌트를 만들 필요는 없다.\r\n// 그냥 function 컴포넌트로 만들어주면 된다.\r\nfunction Movie({ id, title, summary, poster, year, rating, genres }) {\r\n  return (\r\n    // React에서 Link태그는 ReactDOM에 의해 a태그로 변환 됩니다. HTML의 a태그가 React의 Link처럼 변환된 것임\r\n    // to속성에 {{}}를 통해 더 자세한 설정이 가능하다.\r\n    // 참조: https://reactrouter.com/web/api/Link\r\n    // Link에 to속성을 이용해서 /movie-detail 페이지로 갔을 때 props들을(정보들) 받아올 수 있다.\r\n    // Link를 클릭하면 movie-detail페이지로 가게 되고 state안에 있는 정보를 받아온다.\r\n    <Link\r\n      to={{\r\n        // 위에서 받아온 id를 이용해서 /movie/id 형태의 주소로 설정함\r\n        pathname: `/movie/${id}`,\r\n        state: { id, title, summary, poster, year, rating, genres },\r\n      }}\r\n    >\r\n      <div className=\"movie movie__item\">\r\n        {/* App.js에서 보낸 데이터들을 받아서 JSX로 화면에 뿌려줌 */}\r\n        {/* <h1>Movie</h1> */}\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n          {/* 리액트에서 html안에서 자바스크립트를 쓰려면 {{}}로 묶어주고 안에 쓸 수 있다. (자주 쓰진 않지만 참고용으로 알아두기)  */}\r\n          {/* <h3 className=\"movie__title\" style={{ backgroundColor: \"red\" }}> */}\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h3 className=\"movie__year\">({year})</h3>\r\n          <ul className=\"movie__genres\">\r\n            {/* map에 있는 각각의 item은 key가 필요하다. 하지만 우리는 여기서 줄 키가 없다.  */}\r\n            {/* map()메서드는 첫 번쨰 인자외에 두 번째 인자로 argument를 준다. argument에는 숫자가 들어간다.  */}\r\n            {console.log(\"✅ genres:\",genres)}\r\n            {genres === undefined ? \r\n            <li>None</li> : \r\n            genres.map((genres, index) => {\r\n              return (\r\n                <li key={index} className=\"movie__genres__list\">\r\n                  {genres}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <h3 className=\"movie__rating\">\r\n            <i className=\"fas fa-star\"></i>\r\n            {rating === 0 ? \"None\" : rating} / 10.0\r\n          </h3>\r\n          <h3 className=\"movie__summary\">{summary.slice(0, 120)}...</h3>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navigation() {\r\n  return (\r\n    // 아래와 같이 a태그를 이용해서 리액트에서 페이지를 이동하게 되면 페이지를 이동할 때마다 새로고침을 하게 된다. 왜냐면 아래는 a태그는 HTML이기 때문이다.\r\n    // 그래서 이렇게 하지 않기 위해 react-router-dom이 가지고 있는 Link를 가져와서 사용한다.\r\n    <div className=\"navigation\">\r\n      {/* <a href=\"/\">Home</a> */}\r\n      {/* <a href=\"/about\">About</a> */}\r\n      {/* react-router-dom에서 가져온 Link와 to속성을 이용해서 리액트에서 라우트들간의 이동을 할 수 있다.  */}\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\nimport \"../components/Movie.css\";\r\nimport \"../components/Navigation.css\";\r\nimport Navigation from \"../components/Navigation\";\r\n\r\n// 영화 API 주소: https://yts.mx/api#movie_details\r\n// API를 가져올 주소를 설정해준다.\r\n// 주소 가장 맨 끝에 Endpoint Parameters를 추가해서 그 파라미터에 따른 Json데이터를 가져올 수 있다.\r\n// 예를들어 json뒤에 ?sort_by=rating를 썼는데 이것은 rating(평점) 순으로 정렬하려고 써준 것이다.\r\n// rating대신 year나 다른 것들을 쓰면 그 속성에 따른 정렬 방식으로 json데이터를 기져오는 것이다.\r\n// const URL = \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=genres\";\r\nconst URL = \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\";\r\n\r\nclass Home extends React.Component {\r\n  /*\r\n  constructor() {\r\n    console.log(\"constructor\");\r\n    super();\r\n  }\r\n  */\r\n\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n\r\n  // componentDidMount는 랜더가 끝난 후에 실행한다.\r\n  // componentDidMount안에 setTimeout을 이용해 일정 시간후에 state의 값을 바뀌도록 컨트롤 했다.\r\n  // 주의할 점은 setState()는 constructor()에서는 사용하면 에러가 난다.\r\n  // 왜냐하면 setState()는 마운트가 끝난 후(=컴포넌트가 생성된 후) 컨트롤이 가능하기 떄문이다.\r\n  async componentDidMount() {\r\n    // console.log(\"componentDidMount\");\r\n    // setTimeout(() => {\r\n    //   this.setState({isLoading: false})\r\n    // }, 2000);\r\n\r\n    // axios를 이용해 GET방식으로 URL변수를 가진 주소로 API를 요청한다.\r\n    // axios는 async await를 통해 동기 처리를 한 번 해줘야 한다.\r\n    const response = await axios.get(URL);\r\n\r\n    // axios에서 받은 정보를 데이터를 이용해서 movies배열을 가져왔다.\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = response;\r\n    // console.log(movies);\r\n\r\n    this.setState({ movies: movies, isLoading: false });\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"render\");\r\n\r\n    // this.state에서 isLoading과 movies를 뽑아온다.\r\n    const { isLoading, movies } = this.state;\r\n\r\n    // map()메서드를 돌릴 mapMovie함수를 생성함\r\n    // map()메서드를 이용해서 Movie컴포넌트에 데이터를 넘겨줌 (map()메서드를 쓸 때 return은 필수임r\n    function mapMovie(movies) {\r\n      // console.log(\"movies\", movies);\r\n      // return console.log(\"✅movies\", movies.title);\r\n      return <Movie key={movies.id} id={movies.id} title={movies.title} summary={movies.summary} year={movies.year} rating={movies.rating} poster={movies.medium_cover_image} genres={movies.genres} />;\r\n    }\r\n\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading === false ? (\r\n          <header className=\"header\">\r\n            <Link to=\"/\">\r\n              <h1>🎬 Movie</h1>\r\n            </Link>\r\n            <Navigation></Navigation>\r\n          </header>\r\n        ) : (\r\n          <header></header>\r\n        )}\r\n        {/* <h1>App</h1> */}\r\n        {/* {}안에는 자바스크립트를 쓸 수 있고 자바스크립트의 삼항연산자를 이용해 조건문을 만들어줬다.  */}\r\n        {/* isLoading이 true인지 false인지 검사해서 true면 \"Loading..\"을 false면 movies에 map()메서드를 돌린 결과를 가져온다. */}\r\n        {/* Loading 텍스트 대신에 아래와 같이 html태그들을 ()로 묶어서 사용할 수 있다.  */}\r\n        {/* <h2>{isLoading ? \"Loading...\" : \"We are ready\"}</h2> */}\r\n        {isLoading ? (\r\n          <div className=\"loading-bar\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n            <h2>Loading. . .</h2>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">{movies.map(mapMovie)}</div>\r\n        )}\r\n        {isLoading === false ? (\r\n          <footer className=\"footer\">\r\n            <div className=\"footer__icon__container\">\r\n              <div className=\"footer__icon\">\r\n                <img src=\"https://d1telmomo28umc.cloudfront.net/media/public/badges/react_nsNvyE0.png\" alt=\"react\"></img>\r\n              </div>\r\n              <div className=\"footer__icon\">\r\n                <img src=\"https://d1telmomo28umc.cloudfront.net/media/public/badges/es6.png\" alt=\"es6\"></img>\r\n              </div>\r\n            </div>\r\n            <span className=\"footer__text\">&copy; {new Date().getFullYear()} GW. All rights reserved.</span>\r\n          </footer>\r\n        ) : (\r\n          <footer></footer>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navigation from \"../components/Navigation\";\r\nimport \"./Home.css\";\r\nimport \"./About.css\";\r\nimport \"../components/Movie.css\";\r\nimport \"../components/Navigation.css\";\r\n\r\n// 기본적으로 라우터 안에 있는(ex HashRouter, BrowserRouter 등등) 모든 라우트들은(Home, About, movieDetail) props를 가지게 된다.\r\n// react-router에 의해서 props를 가질 수 있는 것이고 props에는 정보가 담겨있다.\r\nfunction About(props) {\r\n  // console.log(props);\r\n  return (\r\n    <section className=\"container about__container\">\r\n      <header className=\"header\">\r\n        <Link to=\"/\">\r\n          <h1>🎬 Movie</h1>\r\n        </Link>\r\n        <Navigation></Navigation>\r\n      </header>\r\n      <h3>\"You are what you do, not what you say you'll do.\"</h3>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navigation from \"../components/Navigation\";\r\nimport \"./Home.css\";\r\nimport \"./movieDetail.css\";\r\nimport \"../components/Movie.css\";\r\nimport \"../components/Navigation.css\";\r\n\r\n// 기본적으로 라우터 안에 있는(ex HashRouter, BrowserRouter 등등) 모든 라우트들은(Home, About, movieDetail) props를 가지게 된다. (Route가 아닌 Navigation은 props를 가지지 않는다.)\r\n// react-router에 의해서 props를 가질 수 있는 것이고 props에는 아래와 같은 기본정보가 담겨있다.\r\n// {history: {…}, location: {…}, match: {…}, staticContext: undefined}\r\nclass movieDetail extends React.Component {\r\n  componentDidMount() {\r\n    // movieDetail은 라우터 안에 있는 라우트이기 때문에 props를 가지고 있다.\r\n    // 그래서 this.props를 통해 props객체를 가져올 수 있는 것이다.\r\n    const { location, history } = this.props;\r\n    // console.log(location);\r\n    // console.log(history);\r\n\r\n    // 만약 location.state가 undefined라면(location.state가 undefined면 state값이 없다는 의미) history가 가지고 있는 push()메서드를 이용해서 \"/\" 주소로 리다이렉트 시킨다.\r\n    if (location.state === undefined) {\r\n      history.push(\"/\");\r\n    } else {\r\n    }\r\n  }\r\n  render() {\r\n    const { location } = this.props;\r\n    // console.log(this.props);\r\n    console.log(\"✅location:\", location);\r\n\r\n    // 만약 location.state가 존재하면 location.state안에 있는 값들을 가져와서 화면에 보여주고 없다면 null을 리턴한다.\r\n    if (location.state) {\r\n      return (\r\n        <section className=\"container\">\r\n          <header className=\"header\">\r\n            <Link to=\"/\">\r\n              <h1>🎬 Movie</h1>\r\n            </Link>\r\n            <Navigation></Navigation>\r\n          </header>\r\n          <div className=\"movies movieDetail__container\">\r\n            <div className=\"movie\">\r\n              <img src={location.state.poster} alt={location.state.title} title={location.state.title} />\r\n              <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{location.state.title}</h3>\r\n                <h3 className=\"movie__year\">({location.state.year})</h3>\r\n                <ul className=\"movie__genres\">\r\n                  {location.state.genres.map((genres, index) => {\r\n                    return (\r\n                      <li key={index} className=\"movie__genres__list\">\r\n                        {genres}\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n                <h3 className=\"movie__rating\">\r\n                  <i className=\"fas fa-star\"></i>\r\n                  {location.state.rating === 0 ? \"None\" : location.state.rating} / 10.0\r\n                </h3>\r\n                <h3 className=\"movie__summary\">{location.state.summary.slice(0, 300)}...</h3>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default movieDetail;\r\n","import React from \"react\";\r\n// react-router-dom을 이용하면 라우터를 이용할 수 있다.\r\n// react-router-dom에는 많은 종류의 라우터들이 있는데 그중 우리는 HashRouter(해쉬 라우터)를 사용한다.\r\n// BrowserRouter로 해도 상관은 없지만 깃허브에 업로드할 때 조금 번거로워서 현재 여기서는 HashRouter로 한 것임\r\nimport { HashRouter, BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport Home from \"./routes/Home\";\r\nimport About from \"./routes/About\";\r\nimport movieDetail from \"./routes/movieDetail\";\r\n// import Navigation from \"./components/Navigation\";\r\n\r\n// 함수형 컴포넌트 App을 생성함\r\nfunction App() {\r\n  return (\r\n    // App은 HashRouter(해쉬 라우터)를 리턴한다. 그리고 HashRouter안에는 Route(라우트)가 있다. (라우터안에 라우트들이 있는 형태이다.)\r\n    // 라우트에는 라우트 경로로 갔을 때 보여줄 컴포넌트들을 지정해주면 된다.\r\n    <HashRouter>\r\n      {/* Navigation컴포넌트를 만들고 안에 라우트들간의 이동을 할 수 있는 Link를 만든다. */}\r\n      {/* 주의할 점은 Link는 라우터 밖에서 쓸 수 없다. Link는 라우터 안에 있어야 한다. */}\r\n      {/* (Navigation이 Link를 가지고 있기 때문에 여기서는 HashRouter밖으로 이동하면 사용 불가능하다는 의미이다.) */}\r\n      {/* <Navigation></Navigation> */}\r\n\r\n      {/* Route에 몇몇 props(여기서는 속성)를 지정해줄 수 있다. */}\r\n      {/* Route의 path속성에는 라우트의 경로를 지정해주고 component에는 해당 라우트의 경로로 갔을 때 보여줄 컴포넌트를 지정해준다. */}\r\n      {/* Route를 통해 / 경로로 들어갔을 때 Home컴포넌트를 보여주고 /about 경로로 들어갔을 때 About컴포넌트를 보여줄 수 있다. */}\r\n      {/* exact속성을 줘야 정확하게 경로가 path 값과 동일할 때만 해당 컴포넌트를 보여준다. */}\r\n      <Route path=\"/\" exact={true} component={Home}></Route>\r\n      <Route path=\"/about\" component={About}></Route>\r\n      <Route paht=\"/movie/:id\" component={movieDetail}></Route>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// \"npx create-react-app 폴더명\" 을 통해 리액트 프로젝트를 초기화하고 시작할 수 있다.\r\n// create-react-app을 하게 되면 자동으로 바벨설정부터 웹팩 등등 기본적으로 리액트를 사용할 수 있도록 세팅해준다.\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\"; // react-dom은 어플리케이션을 랜더할 때 필요한 모듈이다.\r\nimport App from \"./App\";\r\n// import Movie from \"./Movie\";\r\n// import App2 from \"./App2\"; // App2.js를 사용하기 위해 import해왔다.\r\n// import Coding from \"./Coding\";\r\n// import Food from \"./Food\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\n\r\n// react-dom은 render()메소드를 이용해서 index.html안에 있는 div#root안에 여기서 넣어줬던 컴포넌트들을 랜더해서 화면에 그려준다.\r\n// 리액트는 컴포넌트와 함께 동작하고, 모든 것들은 컴포넌트들이다.\r\n// 컴포넌트란 쉽게 말해 HTML를 return하는 함수이다. (이러한 자바스크립트+HTML 조합을 JSX라고 부른다.)\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    {/* <Movie /> */}\r\n    {/* <App2 /> */}\r\n    {/* 리액트가 랜더링을 할 때 Coding컴포넌트에 name=\"kimchi\" 형태로 데이터를 넘겨줄 수 있다. */}\r\n    {/* 이렇게 컴포넌트에게 넘겨주는 데이터들을 props라고 부른다.  */}\r\n    {/* 텍스트는 \"\"로 그냥 보내고(텍스트도 { \" \" }로 묶어서 보낼 수 있음) 나머지 자바스크립트쪽 변수들은 {}안에 묶어서 보낼 수 있다.  */}\r\n    {/* <Coding name=\"kimchi1\" name2={true} name3={[1, 2, 3, \"hello\", true]} /> */}\r\n    {/* <Coding name=\"kimchi2\" /> */}\r\n    {/* <Coding name=\"kimchi3\" /> */}\r\n    {/* <Food /> */}\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}